/*******************************
 * webserver.c
 *  version 3.0
 *  Code for OS_CD_exp3 multi-thread webserver
 *   with time record based on multithread_webserver.c
 *
 *-Coded by David in CUP CS19 
 *-2021.12.09
 *
 * -compile by:
 * -gcc -std=gnu99 -g -o webserver webserver.c -lpthread
 ******************************/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <sys/stat.h>
#define VERSION 23
#define BUFSIZE 8096
#define ERROR 42
#define LOG 44
#define FORBIDDEN 403
#define NOTFOUND 404

#ifndef SIGCLD
# define SIGCLD SIGCHLD
#endif

double total_request_time = 0;
double total_socketread_time = 0;
double total_socketwrite_time = 0;
double total_readweb_time = 0;
double total_logger_time = 0;
static pthread_mutex_t lock;

struct{
    char *ext;
    char *filetype;
}extensions[] = {
    {"gif","image/gif"},{"jpg","image/jpg"},{"jepg","image/jepg"},
    {"png","image/png"},{"ico","image/ico"},{"zip","image/zip"},
    {"gz","image/gz"},{"tar","image/tar"},{"htm","text/html"},
    {"html","text/html"},{0,0}
};

typedef struct {
    int hit;
    int fd;
} webparam;

unsigned long get_file_size(const char *path)
{
    unsigned long filesize = -1;
    struct stat statbuff;
    if(stat(path, &statbuff) < 0){
        return filesize;
    }
    else{
        filesize = statbuff.st_size;
    }
    return filesize;
}

void logger(int type, char *s1, char *s2, int socket_fd)
{
    int fd ;
    char logbuffer[BUFSIZE*2];

    switch(type)
    {
        case ERROR:
            (void)sprintf(logbuffer,"ERROR:%s:%s Errno=%d exiting pid=%d",s1,s2,errno,getpid());
            break;
        case FORBIDDEN:
            (void)write(socket_fd, "HTTP/1.1 403 Forbidden\n Content-Length: 185\n Connection: close\n Content-Type: text/html\n\n<html><head>\n<title>403 Forbidden</title>\n</head><body>\n<h1>Forbidden</h1>\n The requested URL, file type or operation is not allowed on this simple static file webserver.\n</body></html>\n",271); 
            (void)sprintf(logbuffer,"FORBIDDEN: %s:%s",s1, s2); 
            break; 
        case NOTFOUND: 
            (void)write(socket_fd,  "HTTP/1.1  404  Not  Found\n Content-Length:  136\n Connection: close\n Content-Type:  text/html\n\n<html><head>\n<title>404  Not Found</title>\n</head><body>\n<h1>Not  Found</h1>\n The  requested  URL  was  not  found  on  this server.\n</body></html>\n",224); 
            (void)sprintf(logbuffer,"NOT FOUND: %s:%s",s1, s2); 
            break; 
        case LOG: 
            (void)sprintf(logbuffer,"INFO: %s:%s:%d\n",s1, s2,socket_fd); 
            break; 
   } 
/* No checks here, nothing can be done with a failure anyway */
    if((fd = open("nweb.log", O_CREAT| O_WRONLY | O_APPEND,0644)) >= 0) {
    (void)write(fd,logbuffer,strlen(logbuffer));
    (void)write(fd,"\n",1);
    (void)close(fd);
    }
}
/* this is a web thread, so we can exit on errors */
void * web(void * data)
{
    FILE *timefp;
    timefp = fopen("multi-thread_time.txt","a+");
    double timeslide=0;
    struct timeval start;
    struct timeval end;
    struct timeval log_start,log_end;
    double request_time_temp = 0;
    double socketread_time_temp = 0;
    double socketwrite_time_temp = 0;
    double readweb_time_temp = 0;
    double logger_time_temp = 0; 

    int fd;
    int hit;
    int j, file_fd, buflen;
    long i, ret, len;
    char * fstr;
    char buffer[BUFSIZE+1]; /* static so zero filled */
    webparam *param=(webparam*) data;
    fd=param->fd;
    hit=param->hit;

    //socket read time record 1
    gettimeofday(&start,NULL);
    ret =read(fd,buffer,BUFSIZE);    
    gettimeofday(&end,NULL);
    timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
    socketread_time_temp += timeslide;

    if(ret == 0 || ret == -1)   //如果读取客户端消息失败，则向客户端发送 HTTP 失败响应信息 
        logger(FORBIDDEN,"failed to read browser request","",fd);   
   
    if(ret > 0 && ret < BUFSIZE)   /*  设置有效字符串，即将字符串尾部表示为 0 */ 
        buffer[ret]=0;    
    else buffer[0]=0; 
    
    for(i=0;i<ret;i++)   /*  移除消息字符串中的“CF”和“LF”字符*/ 
        if(buffer[i] == '\r' || buffer[i] == '\n') 
            buffer[i]='*'; 

    //Logger time record 1
    gettimeofday(&start,NULL);       
    logger(LOG,"request",buffer,hit); 
    gettimeofday(&end,NULL);
    timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
    logger_time_temp += timeslide; 

    //request_time record
    gettimeofday(&start,NULL);       
    
    if( strncmp(buffer,"GET ",4) && strncmp(buffer,"get ",4) ) 
        logger(FORBIDDEN,"Only simple GET operation supported",buffer,fd); 
   
    for(i=4;i<BUFSIZE;i++) { /* null terminate after the second space to ignore extra stuff */ 
        if(buffer[i] == ' ') { /* string is "GET URL " +lots of other stuff */ 
            buffer[i] = 0; 
        break; 
        } 
    } 

    
    for(j=0;j<i-1;j++)    /*  在消息中检测路径，不允许路径中出现“.” */ 
        if(buffer[j] == '.' && buffer[j+1] == '.') { 
            logger(FORBIDDEN,"Parent directory (..) path names not supported",buffer,fd); 
    } 
    if( !strncmp(&buffer[0],"GET /\0",6) || !strncmp(&buffer[0],"get /\0",6) ) 
    
    /*  如果请求消息中没有包含有效的文件名，则使用默认的文件名 index.html */ 
     (void)strcpy(buffer,"GET /index.html"); 

/*  根据预定义在 extensions 中的文件类型，检查请求的文件类型是否本服务器支持  */ 
    buflen=strlen(buffer); 
    fstr = (char *)0; 
    for(i=0;extensions[i].ext != 0;i++) { 
        len = strlen(extensions[i].ext); 
        if( !strncmp(&buffer[buflen-len], extensions[i].ext, len)) { 
            fstr =extensions[i].filetype; 
            break; 
        } 
    } 
    if(fstr == 0) logger(FORBIDDEN,"file extension type not supported",buffer,fd); 
 
    if(( file_fd = open(&buffer[5],O_RDONLY)) == -1) {   /*  打开指定的文件名*/ 
        logger(NOTFOUND, "failed to open file",&buffer[5],fd); 
    }     
    
    gettimeofday(&end,NULL);
    timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
    request_time_temp += timeslide; 

    //Logger time record 2
    gettimeofday(&start,NULL);       
    logger(LOG,"SEND",&buffer[5],hit); 
    gettimeofday(&end,NULL);
    timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
    logger_time_temp += timeslide; 

    len = (long)lseek(file_fd, (off_t)0, SEEK_END); /*  通过 lseek  获取文件长度*/ 
    (void)lseek(file_fd, (off_t)0, SEEK_SET); /*  将文件指针移到文件首位置*/ 
    (void)sprintf(buffer,"HTTP/1.1  200  OK\n Server:  nweb/%d.0\n Content-Length:  %ld\n Connection: close\n Content-Type: %s\n\n", VERSION, len, fstr); /* Header + a blank line */ 
    
    //Logger time record 3
    gettimeofday(&start,NULL);   
    logger(LOG,"Header",buffer,hit); 
    gettimeofday(&end,NULL);
    timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
    logger_time_temp += timeslide; 

    //Socket write time record 1
    gettimeofday(&start,NULL);   
    (void)write(fd,buffer,strlen(buffer)); 
    gettimeofday(&end,NULL);
    timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
    socketwrite_time_temp += timeslide;

    /* send file in 8kb block - last block may be smaller */
    while ( 1 ) {

        //web read time record 1
        gettimeofday(&start,NULL);  
        ret = read(file_fd, buffer, BUFSIZE); 
        gettimeofday(&end,NULL);
        timeslide = (double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
        readweb_time_temp += timeslide;
        
        if(ret>0)
        {
            //socket write time record 2
             gettimeofday(&start,NULL); 
            (void)write(fd,buffer,ret); 
            gettimeofday(&end,NULL);//get this process socket_read_time  end
            timeslide=(double)(end.tv_sec-start.tv_sec)*1000+(double)(end.tv_usec-start.tv_usec)/1000;
            socketwrite_time_temp += timeslide;
        }
        else{
            break;
        }
    } 
    //usleep时间单位是微秒us ->10000us即0.01s 
    usleep(10000);/*在 socket 通道关闭前，留出⼀段信息发送的时间*/
    close(file_fd);

    close(fd);
    free(param);//释放内存

    pthread_mutex_lock(&lock);
        total_socketwrite_time += socketwrite_time_temp;
        total_logger_time += logger_time_temp;
        total_readweb_time += readweb_time_temp;
        total_socketread_time += socketread_time_temp;
        total_request_time  += request_time_temp;
        
        timefp = fopen("multi-proces_time.txt","a+");
            fprintf(timefp,"总共成功处理 %d 个客户端请求\n",hit);
            fprintf(timefp,"平均处理每个客户端  完成请求处理时间为%f ms\n",total_request_time/hit);
            fprintf(timefp,"平均处理每个客户端  完成socket读的时间为%f ms\n",total_socketread_time/hit);
            fprintf(timefp,"平均处理每个客户端  完成socket写的时间为%f ms\n",total_socketwrite_time/hit);
            fprintf(timefp,"平均处理每个客户端  完成读网络数据的时间为%f ms\n",total_readweb_time/hit);
            fprintf(timefp,"平均处理每个客户端  完成日志记录的时间为%f ms\n",total_logger_time/hit);
            
            fprintf(timefp,"请求处理时间为%f ms\n",total_request_time);
            fprintf(timefp,"完成socket读的时间为%f ms\n",total_socketread_time);
            fprintf(timefp,"完成socket写的时间为%f ms\n",total_socketwrite_time);
            fprintf(timefp,"完成读网络数据的时间为%f ms\n",total_readweb_time);
            fprintf(timefp,"完成日志记录的时间为%f ms\n\n\n",total_logger_time);
        fclose(timefp);
    pthread_mutex_unlock(&lock);

}

int main(int argc, char **argv)
{
    int i, port, listenfd, socketfd, hit; 
    socklen_t length; 
    static struct sockaddr_in cli_addr; /* static = initialised to zeros */ 
    static struct sockaddr_in serv_addr; /* static = initialised to zeros */ 

    if( argc < 3   || argc > 3 || !strcmp(argv[1], "-?") ) { 
        (void)printf("hint: nweb Port-Number Top-Directory\t\tversion %d\n\n" 
            "\tnweb is a small and very safe mini web server\n" 
            "\tnweb only servers out file/web pages with extensions named below\n" 
            "\t and only from the named directory or its sub-directories.\n" 
            "\t There is no fancy features = safe and secure.\n\n" 
            "\t Example:webserver 8181 /home/nwebdir &\n\n" 
            "\t Only Supports:", VERSION); 

        for(i=0;extensions[i].ext != 0;i++) 
            (void)printf(" %s",extensions[i].ext); 
 
        (void)printf("\n\t Not Supported: URLs including \"..\", Java, Javascript, CGI\n" 
            "\t Not Supported: directories / /etc /bin /lib /tmp /usr /dev /sbin \n" 
            "\t No warranty given or implied\n\t Nigel Griffiths nag@uk.ibm.com\n"   ); 
        
        exit(0); 
   } 
   if( !strncmp(argv[2],"/",2 ) || !strncmp(argv[2],"/etc", 5 ) || 
       !strncmp(argv[2],"/bin",5 ) || !strncmp(argv[2],"/lib", 5 ) || 
       !strncmp(argv[2],"/tmp",5 ) || !strncmp(argv[2],"/usr", 5 ) || 
       !strncmp(argv[2],"/dev",5 ) || !strncmp(argv[2],"/sbin",6) ){ 
        (void)printf("ERROR: Bad top directory %s, see nweb -?\n",argv[2]); 
        exit(3); 
   } 
   if(chdir(argv[2]) == -1){ 
        (void)printf("ERROR: Can't Change to directory %s\n",argv[2]); 
        exit(4); 
   } 
   
/* Become deamon + unstopable and no zombies children (= no wait()) */
    if(fork() != 0)
        return 0; /* parent returns OK to shell */
    (void)signal(SIGCLD, SIG_IGN); /* ignore child death */
    (void)signal(SIGHUP, SIG_IGN); /* ignore terminal hangups */
    for(i=0;i<32;i++)
        (void)close(i); /* close open files */
    (void)setpgrp(); /* break away from process group */
    logger(LOG,"nweb starting",argv[1],getpid());

    /* setup the network socket */
    if((listenfd = socket(AF_INET, SOCK_STREAM,0)) <0)
        logger(ERROR, "system call","socket",0);
    port = atoi(argv[1]);
    if(port < 0 || port >60000)
        logger(ERROR,"Invalid port number (try 1->60000)",argv[1],0);

    //初始化线程属性，为分离状态
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr,PTHREAD_CREATE_DETACHED);
    pthread_t pth; 
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    serv_addr.sin_port = htons(port);

    if(bind(listenfd, (struct sockaddr *)&serv_addr,sizeof(serv_addr)) <0)
        logger(ERROR,"system call","bind",0);
    if( listen(listenfd,64) <0)
        logger(ERROR,"system call","listen",0);

    for(hit=1; ;hit++) {
        length = sizeof(cli_addr);
        if((socketfd = accept(listenfd, (struct sockaddr *)&cli_addr, &length)) < 0)
            logger(ERROR,"system call","accept",0);
            
            webparam *param=malloc(sizeof(webparam));
            param->hit=hit;
            param->fd=socketfd;
            if(pthread_create(&pth, &attr, &web, (void*)param)<0){
                logger(ERROR,"system call","pthread_create",0);
        }
    } 
}
